// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      NextAuthSession[]
  tasks         Task[]
  taskLists     TaskList[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model NextAuthSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TaskList {
  id     Int    @id @default(autoincrement())
  name   String
  tasks  Task[]
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  listId      Int
  list        TaskList  @relation(fields: [listId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  sessions    Session[]
}

model Session {
  id        Int       @id @default(autoincrement())
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int? // seconds
  taskId    Int
  task      Task      @relation(fields: [taskId], references: [id])

  @@map("focus_sessions") // Rename table to avoid conflict with NextAuth Session
}
